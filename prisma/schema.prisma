// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id           Int      @id @default(autoincrement())
    name         String?
    email        String?  @unique
    role         UserRole @default(MANAGER)
    passwordHash String

    profile  Profile?
    company  Company?
    accounts Account[]
    sessions Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    MANAGER
    EMPLOYEE
}

model Profile {
    id        Int     @id @default(autoincrement())
    firstName String?
    lastName  String?
    userId    Int     @unique
    user      User    @relation(fields: [userId], references: [id])
}

model Company {
    id   Int    @id @default(autoincrement())
    name String

    userId    Int        @unique
    user      User       @relation(fields: [userId], references: [id])
    customers Customer[]
}

model Customer {
    id         Int     @id @default(autoincrement())
    firstName  String
    middleName String?
    lastName   String
    email      String?
    phone      String?

    companyId Int
    vehicles  Vehicle[]
    Company   Company   @relation(fields: [companyId], references: [id])
}

model Vehicle {
    id    Int     @id @default(autoincrement())
    make  String
    model String
    year  Int
    plate String?
    vin   String?
    color String?

    customerId Int?
    Customer   Customer? @relation(fields: [customerId], references: [id])
}
