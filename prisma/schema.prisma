// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

enum UserRole {
    MANAGER
    EMPLOYEE
}

enum UserStatus {
    ACTIVATED
    PENDING_ACTIVATION
    PENDING_VERIFICATION
    DISABLED
    CLOSED
    DELETED
}

enum ServiceType {
    INTERIOR
    EXTERIOR
    OTHER
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id           Int        @id @default(autoincrement())
    hash         String?    @unique @default(uuid())
    name         String?
    email        String?    @unique
    role         UserRole   @default(MANAGER)
    status       UserStatus @default(PENDING_ACTIVATION)
    passwordHash String
    avatar       String?

    profile   Profile?
    company   Company?  @relation(fields: [companyId], references: [id])
    accounts  Account[]
    sessions  Session[]
    companyId Int?

    @@index([companyId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id        Int     @id @default(autoincrement())
    firstName String?
    lastName  String?
    timeZone  String? @default("Eastern Standard Time")
    userId    Int     @unique
    user      User    @relation(fields: [userId], references: [id])
}

model Company {
    id   Int    @id @default(autoincrement())
    name String

    userId          Int               @unique
    user            User[]
    customers       Customer[]
    CompanyServices CompanyServices[]
}

model Customer {
    id         Int     @id @default(autoincrement())
    firstName  String
    middleName String?
    lastName   String
    email      String?
    phone      String?

    companyId Int
    vehicles  Vehicle[]
    Company   Company   @relation(fields: [companyId], references: [id])

    @@index([companyId])
}

model Vehicle {
    id    Int     @id @default(autoincrement())
    make  String
    model String
    year  Int
    plate String?
    vin   String?
    color String?

    customerId Int?
    Customer   Customer? @relation(fields: [customerId], references: [id])

    @@index([customerId])
}

enum ActivityType {
    USER_ACTIVATE
    USER_REGISTER
    USER_LOGIN
    USER_LOGOUT
    USER_RESET_PASSWORD
    USER_FORGOT_PASSWORD
    USER_VERIFY
}

model ActivityLog {
    id        Int          @id @default(autoincrement())
    type      ActivityType
    message   String
    userId    Int
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Service {
    id              Int               @id @default(autoincrement())
    name            String
    type            ServiceType
    description     String?           @db.VarChar(1000)
    price           Int?
    estimatedTime   Float?
    icon            String?
    notes           String?
    isAddon         Boolean?
    isCustom        Boolean           @default(false)
    sortOrder       Int
    CompanyServices CompanyServices[]
}

model CompanyServices {
    id        Int     @id @default(autoincrement())
    companyId Int
    serviceId Int
    service   Service @relation(fields: [serviceId], references: [id])
    company   Company @relation(fields: [companyId], references: [id])

    isActive Boolean @default(true)

    description   String?
    price         Int?
    estimatedTime Float?
    icon          String?
    notes         String?
    isAddon       Boolean?

    @@index([companyId])
    @@index([serviceId])
}
